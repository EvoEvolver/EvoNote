import{_ as e,o as t,c as i,e as n}from"./app-1ed94c4d.js";const r={},a=n('<h1 id="tl-dr" tabindex="-1"><a class="header-anchor" href="#tl-dr" aria-hidden="true">#</a> TL;DR</h1><ul><li>Indexing and understanding have many similarities. They both require adding context to the objective.</li><li>Therefore, we want to implement better understand by AI with super-fine indexing with a rich structure which allows the AI find the context easily and precisely.</li><li>Our plan is from two sides. One for the structure of the knowledge (indexing), one for the retrieval of the knowledge (searching).</li></ul><h1 id="indexing" tabindex="-1"><a class="header-anchor" href="#indexing" aria-hidden="true">#</a> Indexing</h1><ul><li>We want to use the tree structure to index the knowledge, because the path from the root to the interested node forms a natural context.</li><li>We want to use LLM (or agent) to generate characterizing strings as the vector indexing of the knowledge, instead of using their embedding directly.</li><li>We want to construct multiple trees in difference levels, with each level corresponding to a different level of abstraction.</li></ul><h1 id="searching" tabindex="-1"><a class="header-anchor" href="#searching" aria-hidden="true">#</a> Searching</h1><ul><li>We want to use the tree structure to search the knowledge. An agent travelling on the tree will be developed.</li><li>We want to use LLM (or agent) to generate characterizing strings for the queries, instead of using their embedding directly.</li><li>We want to use multiple levels of trees to search the knowledge. The agent should go from the most abstract level to the most concrete level.</li></ul>',6),o=[a];function l(s,h){return t(),i("div",null,o)}const c=e(r,[["render",l],["__file","0. TL_DR.html.vue"]]);export{c as default};
