import{_ as o,r as t,o as s,c,a as e,b as a,d,e as i}from"./app-1ed94c4d.js";const r={},h=e("h1",{id:"overall",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#overall","aria-hidden":"true"},"#"),a(" Overall")],-1),l=e("p",null,"IDE recommendation: PyCharm",-1),p=e("p",null,"Docstring style: rst",-1),u=e("h2",{id:"docinpy",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#docinpy","aria-hidden":"true"},"#"),a(" DocInPy")],-1),g={href:"https://github.com/EvoEvolver/EvoNote/tree/main/docinpy",target:"_blank",rel:"noopener noreferrer"},b=i(`<h2 id="installation" tabindex="-1"><a class="header-anchor" href="#installation" aria-hidden="true">#</a> Installation</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone git@github.com:EvoEvolver/EvoNote.git
pip <span class="token function">install</span> <span class="token parameter variable">-e</span> <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="classes" tabindex="-1"><a class="header-anchor" href="#classes" aria-hidden="true">#</a> Classes</h1><h2 id="knowledge-storage" tabindex="-1"><a class="header-anchor" href="#knowledge-storage" aria-hidden="true">#</a> Knowledge storage</h2><p><code>Note</code>: The node of knowledge. It only contains the knowledge itself.</p><p><code>Tree</code>: The collection of the references to <code>Note</code> objects. It contains <strong>the relationship among knowledge</strong>. It includes parents, children and path in the tree structure. It also contains the indexings of the notes.</p><h2 id="indexing" tabindex="-1"><a class="header-anchor" href="#indexing" aria-hidden="true">#</a> Indexing</h2><p><code>Indexing</code>: The class for storing the data of one indexing. It can return related notes when provided with queries. It must be interpreted by the <code>Indexer</code> class.</p><p><code>Indexer</code>: The factory of <code>Indexing</code> objects. Indexers are stateless and their state are stored in the <code>Indexing</code> object. A <code>Indexer</code> should never be instantiated and all its methods should be static.</p><h2 id="cache" tabindex="-1"><a class="header-anchor" href="#cache" aria-hidden="true">#</a> Cache</h2><p><code>CacheManager</code>: The class for managing the cache of expensive tasks.</p><p><code>cache_manager</code>: The instance of <code>CacheManager</code> for the whole program. You should import it whenever you want to read and write the caches.</p><p><code>cache_manager.read_cache(self, input: any, type: str) -&gt; Cache</code>: <code>input</code> should be a hashable. Cache storage and retrieval is realized by matching both <code>input</code> and <code>type</code>. See https://github.com/EvoEvolver/EvoNote/blob/main/evonote/search/fine_searcher.py for an example of usage.</p><p>When you want to discard a certain type of cache. You can use <code>with cache_manager.refresh_cache(cache_type: str):</code> to wrap the code that generates the cache. This will disable the cache of the type <code>cache_type</code>.</p><h2 id="debug" tabindex="-1"><a class="header-anchor" href="#debug" aria-hidden="true">#</a> Debug</h2><p>In the <code>debug</code> file, many useful function for revealing the intermediate results are provided. You can use them to debug the program. For example:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> evonote<span class="token punctuation">.</span>debug <span class="token keyword">import</span> display_chats
<span class="token keyword">with</span> display_chats<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    some_code<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>All the calling of chat completion will be displayed.</p><p>See https://github.com/EvoEvolver/EvoNote/blob/main/playground/debug.py for examples of usage.</p><h1 id="important-functionalities" tabindex="-1"><a class="header-anchor" href="#important-functionalities" aria-hidden="true">#</a> Important functionalities</h1><p><code>search</code>: The folder includes the codes for searching in the knowledge base.</p><p><code>builder</code>: The folder includes the codes for building the knowledge base.</p>`,22);function f(m,v){const n=t("ExternalLinkIcon");return s(),c("div",null,[h,l,p,u,e("p",null,[a("Please use the "),e("a",g,[a("DocInPy"),d(n)]),a(" style for adding sections in the codes.")]),b])}const x=o(r,[["render",f],["__file","index.html.vue"]]);export{x as default};
