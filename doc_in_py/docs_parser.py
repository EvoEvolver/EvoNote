from __future__ import annotations

from typing import Dict, Tuple, Callable

"""
Docstring parsers: The class and functions for parse the docstring of functions
"""

Doc_parser_res = Tuple[str, Dict[str, str], str]
Doc_parser = Callable[[str], Doc_parser_res]


def parse_rst_docstring(raw_docs: str) -> Doc_parser_res:
    """
    Parse the docstring generated by PyCharm
    :param raw_docs: raw docstring
    :return: general, params, returns, keywords
    """
    state = "general"

    general = ""
    params = {}
    param_name = ""
    returns = ""
    doc_lines = raw_docs.split("\n")
    for line in doc_lines:
        content_start = 0
        if line.startswith(":param"):
            # find next :
            next_colon = line.find(":", 6)
            if next_colon != -1:
                param_name = line[6:next_colon].strip()
                state = "param"
                content_start = next_colon + 1
        elif line.startswith(":return:"):
            state = "return"
            content_start = 8

        content = line[content_start:]
        if state == "param":
            params[param_name] = params.get(param_name, "") + content.strip()
        elif state == "return":
            returns += content.strip()
        else:
            general += content.strip()
    return general, params, returns


def parse_google_docstring(raw_docs: str):
    """
    Parse the docstring generated by VSCode
    :param raw_docs:
    :return:
    """
    state = "general"
    general = ""
    params = {}
    param_name = ""
    returns = ""
    doc_lines = raw_docs.split("\n")
    for line in doc_lines:
        content_start = 0
        if line.startswith("Args:"):
            state = "param"
            content_start = 5
            continue
        elif line.startswith("Returns:"):
            state = "return"
            content_start = 8

        content = line[content_start:]
        if state == "param":
            # find next :
            next_colon = line.find(":")
            new_content = line
            if next_colon != -1:
                param_name = line[:next_colon].strip()
                state = "param"
                content_start = next_colon + 1
                new_content = line[content_start:]
            params[param_name] = params.get(param_name, "") + " " + new_content.strip()
        elif state == "return":
            returns += content.strip()
        else:
            general += content.strip()
    return general, params, returns
